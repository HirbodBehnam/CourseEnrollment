syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";
import "pkg/proto/time.proto";

option go_package = "CourseEnrollment/pkg/proto";

// Main course enrollment server.
// It cain enroll and disenroll and do other stuff with students and courses.
service CourseEnrollmentServerService {
  // This method must enroll the student
  rpc StudentEnroll (StudentEnrollRequest) returns (google.protobuf.Empty);
  // This method must remove the student from an enrolled course
  rpc StudentDisenroll (StudentDisenrollRequest) returns (google.protobuf.Empty);
  // This method must change the group of a registered user
  rpc StudentChangeGroup (StudentChangeGroupRequest) returns (google.protobuf.Empty);
  // This method must send the registered courses of a user
  rpc GetStudentEnrolledCourses (GetStudentCoursesRequest) returns (StudentCourseDataArray);
  // This method will get all courses in a department
  rpc GetCoursesOfDepartment (GetDepartmentCoursesRequest) returns (DepartmentCourses);
  // This method will list students registered in a course
  rpc GetStudentsInCourse (StudentsOfCourseRequest) returns (StudentsOfCourseResponse);
  // This endpoint must forcibly register a user in a course, add capacity if needed
  rpc ForceEnroll (StudentEnrollRequest) returns (google.protobuf.Empty);
  // This endpoint must forcibly dis-enroll a user from a course.
  rpc ForceDisenroll (StudentDisenrollRequest) returns (google.protobuf.Empty);
}

// The request to enroll a student in a course
message StudentEnrollRequest {
  uint64 student_id = 1;
  int32 course_id = 2;
  uint32 group_id = 3;
}

// The request to disenroll a student in a course
message StudentDisenrollRequest {
  uint64 student_id = 1;
  int32 course_id = 2;
}

// The request to enroll a student in a course
message StudentChangeGroupRequest {
  uint64 student_id = 1;
  int32 course_id = 2;
  uint32 new_group_id = 3;
}

// This is the request to get a student courses.
// It only contains the student ID
message GetStudentCoursesRequest {
  uint64 student_id = 1;
}

// Request data to get all courses in a department.
// This message only contains a department id.
message GetDepartmentCoursesRequest {
  uint32 department_id = 1;
}

// Course data is the general info about a course
message CourseData {
  int32 course_id = 1;
  uint32 group_id = 2;
  uint32 units = 3;
  int32 capacity = 4;
  uint32 registered_count = 5;
  int64 exam_time = 6; // in unix epoch
  repeated ClassTime class_time = 7;
  string lecturer = 8;
}

// StudentCourseData contains the course + if user is
message StudentCourseData {
  CourseData course = 1;
  // Zero on this field means that this user is registered.
  // Zeroth place on queue is out of it right?
  uint32 reserve_queue_position = 2;
}

// StudentCourseDataArray is an array of StudentCourseData
message StudentCourseDataArray {
  repeated StudentCourseData data = 1;
}

// DepartmentCourses is an array of courses
message DepartmentCourses {
  repeated CourseData courses = 1;
}

// The request body to get students of a course
message StudentsOfCourseRequest {
  int32 course_id = 1;
  uint32 group_id = 2;
}

// The result of the request which contains list of students in a course.
message StudentsOfCourseResponse {
  // Registered students with no specific order
  repeated uint64 registered_students = 1;
  // The reserve queue with order. First student is the first one which goes into registered
  // users if anyone dis-enrolls from course.
  repeated uint64 reserved_queue_students = 2;
}