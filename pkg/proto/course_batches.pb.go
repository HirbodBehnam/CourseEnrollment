// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: pkg/proto/course_batches.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CourseDatabaseBatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*CourseDatabaseBatchMessage_Enroll
	//	*CourseDatabaseBatchMessage_Disenroll
	//	*CourseDatabaseBatchMessage_ChangeGroup
	//	*CourseDatabaseBatchMessage_UpdateCapacity
	Action isCourseDatabaseBatchMessage_Action `protobuf_oneof:"action"`
}

func (x *CourseDatabaseBatchMessage) Reset() {
	*x = CourseDatabaseBatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_course_batches_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseDatabaseBatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseDatabaseBatchMessage) ProtoMessage() {}

func (x *CourseDatabaseBatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_course_batches_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseDatabaseBatchMessage.ProtoReflect.Descriptor instead.
func (*CourseDatabaseBatchMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_course_batches_proto_rawDescGZIP(), []int{0}
}

func (m *CourseDatabaseBatchMessage) GetAction() isCourseDatabaseBatchMessage_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *CourseDatabaseBatchMessage) GetEnroll() *CourseDatabaseBatchEnrollMessage {
	if x, ok := x.GetAction().(*CourseDatabaseBatchMessage_Enroll); ok {
		return x.Enroll
	}
	return nil
}

func (x *CourseDatabaseBatchMessage) GetDisenroll() *CourseDatabaseBatchDisenrollMessage {
	if x, ok := x.GetAction().(*CourseDatabaseBatchMessage_Disenroll); ok {
		return x.Disenroll
	}
	return nil
}

func (x *CourseDatabaseBatchMessage) GetChangeGroup() *CourseDatabaseBatchChangeGroupMessage {
	if x, ok := x.GetAction().(*CourseDatabaseBatchMessage_ChangeGroup); ok {
		return x.ChangeGroup
	}
	return nil
}

func (x *CourseDatabaseBatchMessage) GetUpdateCapacity() *CourseDatabaseBatchUpdateCapacity {
	if x, ok := x.GetAction().(*CourseDatabaseBatchMessage_UpdateCapacity); ok {
		return x.UpdateCapacity
	}
	return nil
}

type isCourseDatabaseBatchMessage_Action interface {
	isCourseDatabaseBatchMessage_Action()
}

type CourseDatabaseBatchMessage_Enroll struct {
	Enroll *CourseDatabaseBatchEnrollMessage `protobuf:"bytes,1,opt,name=enroll,proto3,oneof"`
}

type CourseDatabaseBatchMessage_Disenroll struct {
	Disenroll *CourseDatabaseBatchDisenrollMessage `protobuf:"bytes,2,opt,name=disenroll,proto3,oneof"`
}

type CourseDatabaseBatchMessage_ChangeGroup struct {
	ChangeGroup *CourseDatabaseBatchChangeGroupMessage `protobuf:"bytes,3,opt,name=change_group,json=changeGroup,proto3,oneof"`
}

type CourseDatabaseBatchMessage_UpdateCapacity struct {
	UpdateCapacity *CourseDatabaseBatchUpdateCapacity `protobuf:"bytes,4,opt,name=update_capacity,json=updateCapacity,proto3,oneof"`
}

func (*CourseDatabaseBatchMessage_Enroll) isCourseDatabaseBatchMessage_Action() {}

func (*CourseDatabaseBatchMessage_Disenroll) isCourseDatabaseBatchMessage_Action() {}

func (*CourseDatabaseBatchMessage_ChangeGroup) isCourseDatabaseBatchMessage_Action() {}

func (*CourseDatabaseBatchMessage_UpdateCapacity) isCourseDatabaseBatchMessage_Action() {}

type CourseDatabaseBatchEnrollMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The student ID which this message is for.
	StudentId uint64 `protobuf:"varint,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	// The course which user is trying to enroll in.
	CourseId int32 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// The group ID which user is trying to enroll in.
	GroupId uint32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// True if user is in reserved queue
	Reserved bool `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *CourseDatabaseBatchEnrollMessage) Reset() {
	*x = CourseDatabaseBatchEnrollMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_course_batches_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseDatabaseBatchEnrollMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseDatabaseBatchEnrollMessage) ProtoMessage() {}

func (x *CourseDatabaseBatchEnrollMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_course_batches_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseDatabaseBatchEnrollMessage.ProtoReflect.Descriptor instead.
func (*CourseDatabaseBatchEnrollMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_course_batches_proto_rawDescGZIP(), []int{1}
}

func (x *CourseDatabaseBatchEnrollMessage) GetStudentId() uint64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *CourseDatabaseBatchEnrollMessage) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CourseDatabaseBatchEnrollMessage) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CourseDatabaseBatchEnrollMessage) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

type CourseDatabaseBatchDisenrollMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The student ID which this message is for.
	StudentId uint64 `protobuf:"varint,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	// The course which user is trying to disenroll from.
	CourseId int32 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
}

func (x *CourseDatabaseBatchDisenrollMessage) Reset() {
	*x = CourseDatabaseBatchDisenrollMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_course_batches_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseDatabaseBatchDisenrollMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseDatabaseBatchDisenrollMessage) ProtoMessage() {}

func (x *CourseDatabaseBatchDisenrollMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_course_batches_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseDatabaseBatchDisenrollMessage.ProtoReflect.Descriptor instead.
func (*CourseDatabaseBatchDisenrollMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_course_batches_proto_rawDescGZIP(), []int{2}
}

func (x *CourseDatabaseBatchDisenrollMessage) GetStudentId() uint64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *CourseDatabaseBatchDisenrollMessage) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

type CourseDatabaseBatchChangeGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The student ID which this message is for.
	StudentId uint64 `protobuf:"varint,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	// The course which user is trying to change group in.
	CourseId int32 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// The group ID which user is trying to change group to.
	GroupId uint32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// True if user is in reserved queue
	Reserved bool `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
}

func (x *CourseDatabaseBatchChangeGroupMessage) Reset() {
	*x = CourseDatabaseBatchChangeGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_course_batches_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseDatabaseBatchChangeGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseDatabaseBatchChangeGroupMessage) ProtoMessage() {}

func (x *CourseDatabaseBatchChangeGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_course_batches_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseDatabaseBatchChangeGroupMessage.ProtoReflect.Descriptor instead.
func (*CourseDatabaseBatchChangeGroupMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_course_batches_proto_rawDescGZIP(), []int{3}
}

func (x *CourseDatabaseBatchChangeGroupMessage) GetStudentId() uint64 {
	if x != nil {
		return x.StudentId
	}
	return 0
}

func (x *CourseDatabaseBatchChangeGroupMessage) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CourseDatabaseBatchChangeGroupMessage) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CourseDatabaseBatchChangeGroupMessage) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

type CourseDatabaseBatchUpdateCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The course ID to change its capacity
	CourseId int32 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// The group ID of the course to change its capacity
	GroupId uint32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The new capacity of this course
	NewCapacity int32 `protobuf:"varint,3,opt,name=new_capacity,json=newCapacity,proto3" json:"new_capacity,omitempty"`
}

func (x *CourseDatabaseBatchUpdateCapacity) Reset() {
	*x = CourseDatabaseBatchUpdateCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_course_batches_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseDatabaseBatchUpdateCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseDatabaseBatchUpdateCapacity) ProtoMessage() {}

func (x *CourseDatabaseBatchUpdateCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_course_batches_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseDatabaseBatchUpdateCapacity.ProtoReflect.Descriptor instead.
func (*CourseDatabaseBatchUpdateCapacity) Descriptor() ([]byte, []int) {
	return file_pkg_proto_course_batches_proto_rawDescGZIP(), []int{4}
}

func (x *CourseDatabaseBatchUpdateCapacity) GetCourseId() int32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CourseDatabaseBatchUpdateCapacity) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CourseDatabaseBatchUpdateCapacity) GetNewCapacity() int32 {
	if x != nil {
		return x.NewCapacity
	}
	return 0
}

var File_pkg_proto_course_batches_proto protoreflect.FileDescriptor

var file_pkg_proto_course_batches_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x73, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22,
	0x61, 0x0a, 0x23, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22,
	0x7e, 0x0a, 0x21, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x1c, 0x5a, 0x1a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_course_batches_proto_rawDescOnce sync.Once
	file_pkg_proto_course_batches_proto_rawDescData = file_pkg_proto_course_batches_proto_rawDesc
)

func file_pkg_proto_course_batches_proto_rawDescGZIP() []byte {
	file_pkg_proto_course_batches_proto_rawDescOnce.Do(func() {
		file_pkg_proto_course_batches_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_course_batches_proto_rawDescData)
	})
	return file_pkg_proto_course_batches_proto_rawDescData
}

var file_pkg_proto_course_batches_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pkg_proto_course_batches_proto_goTypes = []interface{}{
	(*CourseDatabaseBatchMessage)(nil),            // 0: proto.CourseDatabaseBatchMessage
	(*CourseDatabaseBatchEnrollMessage)(nil),      // 1: proto.CourseDatabaseBatchEnrollMessage
	(*CourseDatabaseBatchDisenrollMessage)(nil),   // 2: proto.CourseDatabaseBatchDisenrollMessage
	(*CourseDatabaseBatchChangeGroupMessage)(nil), // 3: proto.CourseDatabaseBatchChangeGroupMessage
	(*CourseDatabaseBatchUpdateCapacity)(nil),     // 4: proto.CourseDatabaseBatchUpdateCapacity
}
var file_pkg_proto_course_batches_proto_depIdxs = []int32{
	1, // 0: proto.CourseDatabaseBatchMessage.enroll:type_name -> proto.CourseDatabaseBatchEnrollMessage
	2, // 1: proto.CourseDatabaseBatchMessage.disenroll:type_name -> proto.CourseDatabaseBatchDisenrollMessage
	3, // 2: proto.CourseDatabaseBatchMessage.change_group:type_name -> proto.CourseDatabaseBatchChangeGroupMessage
	4, // 3: proto.CourseDatabaseBatchMessage.update_capacity:type_name -> proto.CourseDatabaseBatchUpdateCapacity
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_proto_course_batches_proto_init() }
func file_pkg_proto_course_batches_proto_init() {
	if File_pkg_proto_course_batches_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_course_batches_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseDatabaseBatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_course_batches_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseDatabaseBatchEnrollMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_course_batches_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseDatabaseBatchDisenrollMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_course_batches_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseDatabaseBatchChangeGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_course_batches_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseDatabaseBatchUpdateCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_proto_course_batches_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CourseDatabaseBatchMessage_Enroll)(nil),
		(*CourseDatabaseBatchMessage_Disenroll)(nil),
		(*CourseDatabaseBatchMessage_ChangeGroup)(nil),
		(*CourseDatabaseBatchMessage_UpdateCapacity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_course_batches_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_proto_course_batches_proto_goTypes,
		DependencyIndexes: file_pkg_proto_course_batches_proto_depIdxs,
		MessageInfos:      file_pkg_proto_course_batches_proto_msgTypes,
	}.Build()
	File_pkg_proto_course_batches_proto = out.File
	file_pkg_proto_course_batches_proto_rawDesc = nil
	file_pkg_proto_course_batches_proto_goTypes = nil
	file_pkg_proto_course_batches_proto_depIdxs = nil
}
